# Define provider
provider "aws" {
  region = "us-east-1"
}

# Define variables
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "db_password" {}

# Create VPC
resource "aws_vpc" "vpc" {
  cidr_block = "10.0.0.0/16"
}

# Create subnets
resource "aws_subnet" "subnet" {
  count = 2
  cidr_block = "10.0.${count.index}.0/24"
  vpc_id = aws_vpc.vpc.id
}

# Create security group for API instance
resource "aws_security_group" "api_security_group" {
  name_prefix = "api_security_group"
  vpc_id = aws_vpc.vpc.id

  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create security group for RDS instance
resource "aws_security_group" "rds_security_group" {
  name_prefix = "rds_security_group"
  vpc_id = aws_vpc.vpc.id

  ingress {
    from_port = 5432
    to_port = 5432
    protocol = "tcp"
    security_groups = [aws_security_group.api_security_group.id]
  }
}

# Create RDS instance
resource "aws_db_instance" "rds_instance" {
  allocated_storage = 20
  engine = "postgres"
  engine_version = "13.4"
  instance_class = "db.t2.micro"
  name = "fastapi_db"
  username = "admin"
  password = var.db_password
  parameter_group_name = "default.postgres13"
  skip_final_snapshot = true
  vpc_security_group_ids = [aws_security_group.rds_security_group.id]

  tags = {
    Name = "fastapi_db"
  }
}

# Create EC2 instance for API
resource "aws_instance" "api_instance" {
  ami = "ami-0c94855ba95c71c99"
  instance_type = "t2.micro"
  key_name = "my_key_pair"
  associate_public_ip_address = true
  vpc_security_group_ids = [aws_security_group.api_security_group.id]
  subnet_id = aws_subnet.subnet[0].id

  user_data = <<EOF
              #!/bin/bash
              yum update -y
              yum install docker -y
              systemctl start docker
              docker run -p 80:80 --env DB_HOST=${aws_db_instance.rds_instance.address} --env DB_PASSWORD=${var.db_password} marciovrl/fastapi
              EOF

  tags = {
    Name = "fastapi_instance"
  }
}

# Set up CI/CD pipeline with AWS CodePipeline
resource "aws_codepipeline" "fastapi_pipeline" {
  name = "fastapi_pipeline"
  role_arn = "arn:aws:iam::123456789012:role/my-codepipeline-role"
  
  artifact_store {
    location = "fastapi-artifact-bucket"
    type = "S3"
  }

  stage {
    name = "Source"
    action {
      name = "SourceAction"
      category = "Source"
      owner = "AWS"
      provider = "CodeCommit"
      version = "1"
      output_artifacts = ["fastapi_source"]
      configuration = {
        RepositoryName = "fastapi"
      }
